Séance 2 :

Question 3 : 

  Complexité et terminaison : 
  research est en O(mn), relocate fait appel a research puis réalise au plus m+n swaps, donc est en O(mn+m+n)=O(mn).
  Comme get_solution fait appel mn fois a relocate, elle est en O((mn)^2). Comme research, qui est appelée mn fois 
  réalise au plus m+n swaps, la longueur de la solution est mn*(m+n).

  Optimalité et terminaison :
  Comme l'algorithme replace successivement 1, ..., mn dans cet ordre, la fonction termine et donne une solution valide.
  Néanmoins, comme les opérations sur chacun des éléments 1, ..., mn sont indépendantes, dans le sens ou le déplacement 
  de i, lorsque 1, ..., i-1 sont déjà rangés, peut modifier les positions des éléments non encore rangés, elles ne cherchent 
  pas nécessairement à faire les déplacements les plus adéquats, tant que l'élément i arrive au bon endroit. Ainsi, un
  nombre important d'opérations ne sont pas exploités, voire inutiles. On pourrait, pour améliorer l'algorithme, essayer 
  de décider, en fonction des swaps possibles pour permettre a i d'arriver au bon endroit, de choisir le déplacement qui
  aurait l'influence la plus positive sur les éléments non encore rangés.

  Remarque supplémentaires : 
  Une autre proposition d'algorithme, considérée comme "naïve" par le binôme est disponible également sous le nom de get_solution2
  dans la classe Solver. Cette propostion avait déjà été évoqué avec le chargé de TD, et donc ne fera pas l'objet de précisions
  supplémentaires, sauf demande du correcteur après le premier rendu. Notez seulement que get_solution donne une solutions avec une
  meilleure complexité, en O(mn*(max(m+n))) selon nos calculs.

Question 7 : 

  Techniquement, construct_graphe a une complexité en O((n*m)!^3) car on fait un while sur toutes les grilles possibles de taille n*m 
  (en temps (n*m)!), puis on les parcourt toutes (temps en (n*m)!), puis on parcourt tous les noeuds du graphe (temps encore en (n*m)!).
  Le graphe construit a (n*m)! noeuds (qui correspondent aux grilles et donc aux permutations de l’ensemble {1,2,..., n*m}) et comme 
  c’est un arbre il a (n*m) -1 arêtes.


Séances 3 et 4 :

Question 5 : 

  Pour étendre le jeu, on peut par exemple en interdire certains échanges de cases, ce qui implique de directement changer la fonction swap implémentée dans grid.
  On pourrait par exemple la réécrire de la manière suivante :

      def swap_with_barriers(self, cell1, cell2, barriers_list):
        """
        Implements the swap operation between two cells. Raises an exception if the swap is not allowed.

        Parameters: 
        -----------
        cell1, cell2: tuple[int]
            The two cells to swap. They must be in the format (i, j) where i is the line and j the column number of the cell. 
        barriers_list : list of tuples containing two cells in the format (i,j)
        """
        i1, j1 = cell1
        i2, j2 = cell2
        if (i1 == i2 and abs(j1-j2) == 1 or j1 == j2 and abs(i1-i2)) and (cell1,cell2) not in barriers_list and (cell2,cell1) not in barriers_list:
            self.state[i1][j1], self.state[i2][j2] = self.state[i2][j2], self.state[i1][j1]
        else:
            raise Exception("Sorry, this swap is not allowed")

Question 6 :
  
  Si la grille est 1xn, il s'agit juste d'un tri. Sa compléxité est en nlog(n), si on prend par exemple un tri fusion.
  Si la grille est kxn, une stratégie peut être : dans un premier temps, réussir à mettre dans chaque ligne i (de 0 à k-1) les éléments (i*n)+1 jusqu'à (i*n)+n,
  puis trier chaque ligne comme précédemment.

